(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{891:function(n,e){n.exports="# Intro to React\n\na JavaScript library for building user interfaces\n\n---\n\n## React Features\n\n- atomic design\n- declarative syntax\n- one-way data flow\n- cross-platform\n\n---\n\n## Atomic Design\n\n- Methodology for creating design systems (as opposed to ad-hoc collections of web pages)\n- An equal partnership between design and engineering\n\n---\n\n## Atomic Design: Concepts\n\n|     |     |     |\n| --- | --- | --- |\n| ![Tokens](/images/react/atomic_design_tokens.png) | ![Atoms](/images/react/atomic_design_atoms.png) | ![Molecules](/images/react/atomic_design_molecules.png) |\n| ![Organisms](/images/react/atomic_design_organisms.png) | ![Systems](/images/react/atomic_design_systems.png) | &nbsp; |\n\n---\n\n## Atomic Design: Benefits\n\n- Composability\n- Reusability\n- Consistency\n- Maintainability\n\n---\n\n## Components\n\na component is a function that returns a React element.\n\n```js\n  function Hello(props) {\n    return React.createElement(\n      'div', null, `Hello, ${props.name}`\n    );\n  }\n\n  function App() {\n    return React.createElement('div', null, [\n      React.createElement(Hello, { name: 'everyone' })\n    ]);\n  }\n```\n\n---\n\n## JSX\n\nhtml-like syntax sugar that transpiles to `React.createElement` calls.\n\n```jsx\n  import React from 'react'; // must import React when using JSX\n\n  const Hello = props => <div>Hello {props.name}</div>;\n\n  const HelloWorld = () => <Hello name=\"World\" />;\n\n  const Page = () => (\n    <div>\n      <HelloWorld />\n      <Hello name=\"everyone\" />\n    </div>\n  );\n```\n\n---\n\n## Class components\n\nanother way to declare a component is using the JavaScript class syntax\n\n```jsx\n  class ClassyHello extends React.Component {\n    render() {\n      return (\n        <div>Hello {this.props.name}</div>\n      );\n    }\n  }\n```\n\n---\n\n## Class components with state\n\nuntil recently using a class component was the only way to access certain React features\n\n```jsx\n  class ClassyCounter extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = { value: 0 };\n      this.incrementOnClick = () => {\n        this.setState(oldState => ({ value: oldState.value + 1 }));\n      };\n    }\n\n    render() {\n      return (<div>\n        <span>Value: {this.state.value}</span>\n        <button onClick={this.incrementOnClick}>Increment</button>\n      </div>);\n    }\n  }\n```\n\n---\n\n## Functional state with hooks\n\nthe new hooks API allows multiple class-only features\nto be used in functional components\n\n```jsx\n  function FunctionalCounter() {\n    const [value, setValue] = React.useState(0);\n    return (<div>\n      <span>Value: {value}</span>\n      <button onClick={() => setValue(oldValue => oldValue + 1)}>Increment</button>\n    </div>);\n  };\n```\n\n---\n\n## Component Lifecycle\n\n![Component lifecycle](/images/react/component-lifecycle.jpg)\n\n---\n\n## Unidirectional data flow\n\nReceive action -> Update state -> Update UI\n\n![The flux architecture](/images/react/flux.png)\n\n---\n\n## Rendering Components\n\nReact's virtual DOM allows it to render the same\ncomponent tree in multiple environments\n\n![cross platform](/images/react/react-fiber-architecture.png)\n---\n\n## Rendering in the browser\n\ncreate real html elements from the react virtual DOM tree  \n\n```jsx\n  import React from 'react';\n  import ReactDOM from 'react-dom';\n  import MyApp from './my-app';\n\n  ReactDOM.render(\n    <MyApp />\n    document.getElementById('root')\n  );\n```\n\n---\n\n## Rendering on the server\n\ncreate an html string that can be sent from the server to browsers\n\n```jsx\n  import React from 'react';\n  import ReactDOM from 'react-dom/server';\n  import MyApp from './my-app';\n\n  const htmlString = ReactDOM.renderToString(<MyApp />);\n```\n\n---\n\n## Rendering in tests\n\ncreating a JSON object that we can inspect and verify in tests\n\n```jsx\n  import TestRenderer from 'react-test-renderer';\n  import MyApp from './my-app';\n\n  const testRenderer = TestRenderer.create(<MyApp />);\n\n  console.log(testRenderer.toJSON());\n```\n\n---\n\n## Virtual DOM\n\n- diffing\n- reconciling\n- minimal DOM manipulation\n\n---\n\n## Virtual DOM\n\n![Diffing and reconciling](/images/react/virtualdom.png)\n\n---\n\n## Bootstrapping a project\n\nCreate simple zero-configuration applications using a popular template\n\n```bash\n  npm install -g create-react-app\n  create-react-app my-first-app\n  cd my-first-app\n  npm run start\n```\n\n\n---\n\n## Links\n\n- [React documentation](https://reactjs.org/)\n- [Overreacted - Dan Abramov's blog](https://overreacted.io/)\n- [Component lifecycle diagram](http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/)\n- [create-react-app documentation](https://github.com/facebook/create-react-app)\n\n---\n\n## Questions?\n"}}]);
//# sourceMappingURL=11.603d3df0.chunk.js.map