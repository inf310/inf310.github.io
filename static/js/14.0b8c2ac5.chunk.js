(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{894:function(n,e){n.exports='# Overview of web development\n\n---\n\n## Agenda\n\n- HTTP\n- HTML\n- CSS\n- JavaScript\n- Node.js\n\n---\n\n## Short history of web development\n\n- 1965: Ted Nelson coins the word Hypertext\n- 1968: Doug Engelbart prototypes an "online system"\n- 1977: Vint Cerf and Bob Kahn develop the TCP/IP protocols at DARPA\n\n---\n\n## Short history of web development\n\n- 1989: Tim Berners-Lee creates the first HTTP server at CERN\n- 1995: Brendan Eich creates JavaScript at Netscape\n- 1996: W3C releases the first CSS specification\n\n---\n\n## Short history of web development\n\n- 2005: Jesse Garrett coins the term AJAX\n- 2009: Ryan Dahl creates Node.js\n- 2010: StongLoop release Express.js\n- 2013: Facebook release React.js\n\n---\n\n## Short history of web development\n\n![Web development timeline](/images/web-dev-timeline.png)\n\n---\n## Networking\n\n- **Protocol**: a set of data formats and rules for communication\n- **Bandwidth**: the total capacity of a connection (Gb/s)\n- **Throughput**: the amount of data a node can process (Gb/s)\n- **Latency**: the amount of time a client waits for a response (seconds)\n\n---\n\n## HTTP\n\n- Text-based\n- Request-Response model\n- Intended for simple document retrieval\n- Limitations have led to many workarounds\n\n---\n\n## HTTP/2\n\n- Faster and smarter (binary encoding)\n- Two-way communication\n- Eliminates head-of-line blocking\n- Breaks many hacks around http 1.1\n\n---\n\n## SSL: Secure Socket Layer\n\n- attacker cannot read messages\n- attacker cannot change message\n- guaranteed through certificates\n\n---\n\n## Front-end evolution\n\n- **Static Web sites**: html only, reload on action\n- **AJAX Web sites**: background data processing\n- **SPA**: single page applications\n\n---\n## The browser\n\n- has been evolving for over 20 years\n- mostly open, transparent and easy-to-use\n- protects multiple interests on a page\n- provides a built-in development environment\n\n---\n\n## Front-end technologies\n\n- **HTML**: content and structure\n- **CSS**: styling and presentation\n- **JavaScript**: interactivity\n- **Browser APIs**: multiple functionalities\n\n---\n\n## Back-end evolution\n\n- **Static web server**: returns files from disk\n- **CGI Protocol**: run a program to generate a response\n- **Application Server**: language specific implementations\n- **Serverless**: execute code on shared cloud infrastructure\n\n---\n\n## Monolithic architecture\n\n![Monolithic](/images/monolithic-diagram.png)\n\n---\n\n## Microservice architecture\n\n![Services](/images/microservice-diagram.png)\n\n---\n\n## Questions?\n'}}]);
//# sourceMappingURL=14.0b8c2ac5.chunk.js.map