(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{891:function(n,e){n.exports="# React patterns\n\n---\n\n### Passing down elements\n\n```jsx\n  function App(props) {\n    const userProfile = (\n      <a href={props.userProfileLink}>\n        <img src={props.userAvatar} alt={props.userName} />\n      </a>\n    );\n\n    return (\n      <div>\n        <Header userProfile={userProfile} />\n        <Content userProfile={userProfile} />\n        <Footer userProfile={userProfile} />\n      </div>\n    );\n  }\n```\n\n---\n\n## React clone element\n\nIf you really need to change the props of a given element\n** This can make you app slow**\n\n```jsx\n  const Header = ({ userProfile }) => {\n    const profileWithAlternativeLink = React.cloneElement(\n      userProfile, { userProfileLink: '/an/alternative/url' }\n    );\n\n    return (\n      <div>\n        Original profile: {userProfile}\n        Alternative link: {profileWithAlternativeLink}\n      </div>\n    );\n  };\n```\n\n---\n\n### Passing down functions\n\nAllowing children to control the parent's state\n\n```jsx\n  function FormWizard() {\n    const [step, setStep] = useState(0);\n    const [isEnabled, setEnabled] = useState(true);\n    const nextStep = useCallback(() => setStep(stp => stp + 1));\n\n    return (\n      <div>\n        <div>You are at step {step} out of 2</div>\n        <FirstStep onValidation={setEnabled} />\n        <SecondStep onValidation={setEnabled} />\n        <Button onClick={nextStep} enabled={isEnabled}>Next</Button>\n      </div>\n    );\n  }\n```\n\n---\n\n## Higher Order Components (HOC)\n\nPassing a component as a prop to another component\n\n- Decoration / mix-in Pattern\n- Template method / strategy pattern\n- Render props / callback pattern\n\n---\n\n### Decorating Components\nExtending component's functionality by wrapping them in HOCs\n\n```jsx\n  const LoadingButton = withLoading(MyButton);\n\n  const ThemedLoadingButton = withTheme(LoadingButton);\n\n  const DisapearingThemedLoadingButton = withTransition(\n    { fadeOut: 1000 },\n    ThemedLoadingButton\n  );\n```\n\n---\n\n### Template Components\nHOC controls rendering. Your component must fit its interface\n\n```jsx\n  // display the component if the path matches\n  <Route path=\"/dashboard\" component={Dashboard} />\n\n  // use listItem to render each list element\n  <ListView listItem={MyItem} />\n\n  // show loading, fetch data\n  // then render display with the data\n  <DataFetcher\n    url=\"/data.json\"\n    loading={Loading}\n    display={Graph}\n  />\n```\n\n---\n\n### Render Props\nHOC provides data to a callback. You control rendering\n\n```jsx\n  <DataFetcher\n    url=\"/data.json\"\n    render={data => <Graph data={data} />}\n  />\n\n  <MyContext.Consumer>\n    {contextValue => <h1>{contextValue}</h1>}\n  </MyContext.Consumer>\n\n  <Route path=\"/dashboard\">\n    <Dashboard />\n  </Route>\n```\n\n---\n\n## Dynamically loading components\n\n- Lazy loading\n- Fullstack components\n- Atomic but composable UIs\n\n---\n\n### Loadable HOC\nLoading a component then rendering it\n\n```jsx\n  import Loadable from 'react-loadable';\n\n  const LoadableComponent = Loadable({\n    loader: () => import('./myCoolComponent'),\n    loading: () => 'Loading...'\n  });\n\n  <LoadableComponent data={42} />\n```\n\n---\n\n### Conditional Loading\nDynamically select which component gets loaded\n\n```jsx\n  const DataView = Loadable({\n    loader: () => (appConfig.view === 'graph'\n      ? import('./graphView')\n      : import('./tableView')\n  })\n\n  <DataView data={data} />\n```\n\n---\n\n### Fullstack Components\nThe server renders the component. Client-side props used as server-side params.\n\n```jsx\n  const UserProfile = Loadable({\n    loader: ({ id }) => componentRegistry.fetch({\n      name: 'user-profile',\n      version: 'latest',\n      params: { id }\n    })\n  })\n\n  <UserProfile id=\"usr-7245\" />\n```\n\n---\n\n## React lazy and suspense\n\n```jsx\n  import React, { Suspense } from 'React';\n  import MyErrorHandler from './MyErrorHandler';\n  const LazyComponentA = React.lazy(() => import('./ComponentA'));\n  const LazyComponentB = React.lazy(() => import('./ComponentB'));\n\n  const MyComponent = () => (\n    <MyErrorHandler>\n      <Suspense fallback={<div>Loading...</div>}>\n          <LazyComponentA />\n          <LazyComponentB />\n      </Suspense>\n    </MyErrorHandler>\n  );\n```\n\n---\n\n## Questions?\n"}}]);
//# sourceMappingURL=10.4e3c45eb.chunk.js.map