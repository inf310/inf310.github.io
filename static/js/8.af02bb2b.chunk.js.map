{"version":3,"sources":["../topics/react-forms.md"],"names":["module","exports"],"mappings":"2EAAAA,EAAAC,QAAA","file":"static/js/8.af02bb2b.chunk.js","sourcesContent":["module.exports = \"# React refs\\n\\n---\\n\\n## Focusing an element\\n\\nFocusing on an element in HTML and JS is imperative\\n\\n-- `form.html` --\\n```html\\n  <input id=\\\"first-name\\\" />\\n```\\n-- `form.js` --\\n```js\\n  const inputNode = document.getElementById('first-name');\\n  inputNode.focus();\\n```\\n\\n---\\n\\n## React refs (using hooks)\\n\\nRefs are a way to access imperative APIs\\n\\n```jsx\\n  function FocusedInput() {\\n    const inputRef = React.useRef();\\n    React.useEffect(() => { inputRef.current.focus(); }, []);\\n\\n    return <input ref={inputRef} />\\n  }\\n```\\n\\n---\\n\\n## React refs (with a class)\\n\\n```jsx\\n  class ClassyFocusedInput extends React.Component {\\n    constructor() {\\n      super();\\n      this.inputRef = React.createRef();\\n    }\\n\\n    componentDidMount() {\\n      this.inputRef.current.focus();\\n    }\\n\\n    render() {\\n      return <input ref={this.inputRef} />\\n    }\\n  }\\n```\\n\\n---\\n\\n## Uncontrolled forms\\n\\nUsing a ref to read the data from a field\\n\\n```jsx\\n  function SimpleUncontrolledForm() {\\n    const inputRef = React.useRef();\\n    const submitForm = () => sendToServer(inputRef.current.value);\\n\\n    return (\\n      <div>\\n        <input ref={inputRef} />\\n        <button onClick={submitForm}>submit</button>\\n      </div>\\n    );\\n  }\\n```\\n\\n---\\n\\n## Controlled forms\\n\\nusing React state to keep the value of a field\\n\\n```jsx\\n  function SimpleControlledForm() {\\n    const [value, setValue] = React.useState('');\\n    const onChange = event => setValue(event.target.value);\\n\\n    return <input value={value} onChange={onChange} />;\\n  }\\n```\\n\\n---\\n\\n## Features comparison\\n\\n|  feature | uncontrolled || controlled |\\n| --- | --- | ---|\\n| one-time value retrieval |\\t✅ ||\\t✅ |\\n| validating on submit | ✅ || ✅ |\\n| instant field validation | ❌|| ✅ |\\n| conditional disabling | ❌ || ✅ |\\n| several inputs for same data | ❌ || ✅ |\\n| | | | *[source](https://goshakkk.name/controlled-vs-uncontrolled-inputs-react/)* |\\n\\n---\\n\\n## Callback refs\\n\\nSometimes we need to know when the ref is attached to a different node\\n\\n```jsx\\n  const CoinFlip = () => {\\n    const coinFlip = Math.random() < 0.5;\\n    const alertNodeId = node => (node && alert(node.id));\\n\\n    return coinFlip\\n      ? <div id=\\\"heads\\\" ref={alertNodeId}>Heads</div>\\n      : <div id=\\\"tails\\\" ref={alertNodeId}>Tails</div>;\\n  };\\n```\\n\\n---\\n\\n## Hoisting state\\n\\n```jsx\\n  function NameInput(props) {\\n    const [name, setName] = useState(props.savedName);\\n\\n    const setAndPassToParent = (event) => {\\n      setName(event.target.value);\\n      props.onNameChange(event.target.value);\\n    };\\n\\n    return (\\n      <div>\\n        <label>Enter your name:</label>\\n        <input value={firstName} onChange={setAndPassToParent} />\\n      </div>\\n    );\\n  }\\n```\\n\\n---\\n\\n## Forward refs\\n\\nExpose a child ref as this component's ref\\n\\n```jsx\\n  const FancyInput = React.forwardRef((props, ref) => (\\n    <input {...props} style={fancyStyle} ref={ref} />\\n  ));\\n```\\n\\n---\\n\\n## Instance methods\\n\\na component can expose custom imperative methods through a ref\\n\\n```jsx\\n  class Switch extends React.Component {\\n    state = { on: false };\\n    toggle() {\\n      this.setState(oldState => ({ on: !oldState.on }));\\n    }\\n\\n    render() {\\n      return <div>{this.state.on ? 'On' : 'Off'}</div>;\\n    }\\n  }\\n```\\n\\n---\\n\\n## useReducer\\n\\na more powerful version of useState\\n\\n```jsx\\n  const initialState = { name: '', age: '' };\\n  const reducer = (state, { field, value }) => {\\n    return { ...state, [field]: value };\\n  }\\n\\n  const MyForm = () => {\\n    const [state, dispatch] = React.useReducer(reducer, initialState);\\n    const setField = field => e =>\\n      dispatch({ field, value: e.target.value });\\n\\n    return (<form>\\n      <input value={state.name} onChange={setField('name')} />\\n      <input value={state.age} onChange={setField('age')} />\\n    </form>);\\n  };\\n\\n```\\n---\\n\\n\\n## Questions?\\n\""],"sourceRoot":""}